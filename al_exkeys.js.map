{"version":3,"file":"al_exkeys.js","mappings":"uBAAIA,E,8BC4EEC,EAAY,CAChB,SACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,UACA,YACA,YACA,aACA,gBACA,UACA,gBACA,iBACA,YACA,YACA,YACA,gBACA,iBACA,YACA,WACA,YACA,YACA,aACA,UACA,WACA,UACA,WACA,WACA,WACA,YACA,SACA,WACA,gBACA,eACA,gBACA,eACA,cACA,gBACA,aACA,YACA,cACA,UACA,WACA,cACA,gBACA,SACA,iBACA,aACA,YACA,iBACA,gBACA,gBACA,cACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,aACA,aACA,eACA,eACA,UACA,YACA,WACA,WACA,WACA,cACA,cACA,eACA,WAMF,SAASC,EAAiBC,GACxB,IACMC,EAAe,IAAXD,EACJE,EAAI,EAAAC,SAAW,IAAWF,EAAI,EAAK,IACnCG,EAAI,EAAAC,SAAW,EAAmB,IAAdJ,EAAI,EAAI,IAC5BK,EAAmB,IAAXN,GAAkB,IAAAO,SAAQ,IAAK,IAAK,IAAK,IAAAA,SAAQ,IAAK,EAAG,IACvE,IAAAC,UAAS,EAAAC,OAAQP,EAAGE,EAAGF,EAAI,GAAIE,EAAI,EAAGE,IACtC,IAAAI,eAAc,EAAAD,OAAQ,EAAAE,KAAMT,EAAI,EAAGE,EAAI,GAAG,IAAAG,SAAQ,EAAG,EAAG,IAAK,EAAG,KANpD,GAOd,CAIA,SAASK,KACP,IAAAC,MAAK,EAAAJ,OAAQ,EAAAA,OAAQ,EAAG,GAAI,EAAG,GAAI,EAAAN,SAAW,EAAG,EAAAE,SAAW,KAC5D,IAAAG,UACE,EAAAC,OACA,EACA,EAAAJ,SAAW,GACX,EAAAF,SAAW,EACX,E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","sources":["webpack://allegro-ts-examples/webpack/runtime/chunk loaded","webpack://allegro-ts-examples/./src/al_exkeys.ts","webpack://allegro-ts-examples/webpack/bootstrap","webpack://allegro-ts-examples/webpack/runtime/compat get default export","webpack://allegro-ts-examples/webpack/runtime/define property getters","webpack://allegro-ts-examples/webpack/runtime/hasOwnProperty shorthand","webpack://allegro-ts-examples/webpack/runtime/jsonp chunk loading","webpack://allegro-ts-examples/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","/*\n *    Example program for the Allegro library, by Shawn Hargreaves.\n *\n *    This program demonstrates how to access the keyboard. The\n *    first part shows the basic use of readkey(). The second part\n *    shows how to extract the ASCII value. Next come the scan codes.\n *    The fourth test detects modifier keys like alt or shift. The\n *    fifth test requires some focus to be passed. The final step\n *    shows how to use the global key array to read simultaneous\n *    key presses.\n *    The last method to detect key presses are keyboard callbacks.\n *    This is demonstrated by by installing a keyboard callback,\n *    which marks all pressed keys by drawing to a grid.\n */\n\nimport {\n  screen,\n  allegro_init,\n  allegro_message,\n  blit,\n  END_OF_MAIN,\n  install_keyboard,\n  makecol,\n  SCREEN_H,\n  SCREEN_W,\n  set_gfx_mode,\n  textprintf_centre_ex,\n  font,\n  set_palette,\n  readkey,\n  init_allegro_ts,\n  enable_debug,\n  rectfill,\n  textprintf_ex,\n  END_OF_FUNCTION,\n  install_timer,\n  GFX_AUTODETECT,\n  GFX_SAFE,\n  allegro_error,\n  GFX_TEXT,\n  desktop_palette,\n  clear_to_color,\n  LOCK_FUNCTION,\n  acquire_screen,\n  release_screen,\n  key_shifts,\n  KB_SHIFT_FLAG,\n  KB_CTRL_FLAG,\n  KB_ALT_FLAG,\n  KB_LWIN_FLAG,\n  KB_RWIN_FLAG,\n  KB_MENU_FLAG,\n  KB_COMMAND_FLAG,\n  KB_CAPSLOCK_FLAG,\n  KB_NUMLOCK_FLAG,\n  KB_SCROLOCK_FLAG,\n  KEY_0,\n  KEY_1,\n  KEY_2,\n  KEY_3,\n  KEY_4,\n  KEY_5,\n  KEY_6,\n  KEY_7,\n  KEY_8,\n  KEY_9,\n  KEY_F6,\n  KEY_ESC,\n  key,\n  clear_keybuf,\n  rest,\n  KEY_MAX,\n  keyboard_driver,\n  KEY_ENTER,\n} from \"allegro-ts\";\n\nconst key_names = [\n  \"(none)\",\n  \"KEY_A\",\n  \"KEY_B\",\n  \"KEY_C\",\n  \"KEY_D\",\n  \"KEY_E\",\n  \"KEY_F\",\n  \"KEY_G\",\n  \"KEY_H\",\n  \"KEY_I\",\n  \"KEY_J\",\n  \"KEY_K\",\n  \"KEY_L\",\n  \"KEY_M\",\n  \"KEY_N\",\n  \"KEY_O\",\n  \"KEY_P\",\n  \"KEY_Q\",\n  \"KEY_R\",\n  \"KEY_S\",\n  \"KEY_T\",\n  \"KEY_U\",\n  \"KEY_V\",\n  \"KEY_W\",\n  \"KEY_X\",\n  \"KEY_Y\",\n  \"KEY_Z\",\n  \"KEY_0\",\n  \"KEY_1\",\n  \"KEY_2\",\n  \"KEY_3\",\n  \"KEY_4\",\n  \"KEY_5\",\n  \"KEY_6\",\n  \"KEY_7\",\n  \"KEY_8\",\n  \"KEY_9\",\n  \"KEY_0_PAD\",\n  \"KEY_1_PAD\",\n  \"KEY_2_PAD\",\n  \"KEY_3_PAD\",\n  \"KEY_4_PAD\",\n  \"KEY_5_PAD\",\n  \"KEY_6_PAD\",\n  \"KEY_7_PAD\",\n  \"KEY_8_PAD\",\n  \"KEY_9_PAD\",\n  \"KEY_F1\",\n  \"KEY_F2\",\n  \"KEY_F3\",\n  \"KEY_F4\",\n  \"KEY_F5\",\n  \"KEY_F6\",\n  \"KEY_F7\",\n  \"KEY_F8\",\n  \"KEY_F9\",\n  \"KEY_F10\",\n  \"KEY_F11\",\n  \"KEY_F12\",\n  \"KEY_ESC\",\n  \"KEY_TILDE\",\n  \"KEY_MINUS\",\n  \"KEY_EQUALS\",\n  \"KEY_BACKSPACE\",\n  \"KEY_TAB\",\n  \"KEY_OPENBRACE\",\n  \"KEY_CLOSEBRACE\",\n  \"KEY_ENTER\",\n  \"KEY_COLON\",\n  \"KEY_QUOTE\",\n  \"KEY_BACKSLASH\",\n  \"KEY_BACKSLASH2\",\n  \"KEY_COMMA\",\n  \"KEY_STOP\",\n  \"KEY_SLASH\",\n  \"KEY_SPACE\",\n  \"KEY_INSERT\",\n  \"KEY_DEL\",\n  \"KEY_HOME\",\n  \"KEY_END\",\n  \"KEY_PGUP\",\n  \"KEY_PGDN\",\n  \"KEY_LEFT\",\n  \"KEY_RIGHT\",\n  \"KEY_UP\",\n  \"KEY_DOWN\",\n  \"KEY_SLASH_PAD\",\n  \"KEY_ASTERISK\",\n  \"KEY_MINUS_PAD\",\n  \"KEY_PLUS_PAD\",\n  \"KEY_DEL_PAD\",\n  \"KEY_ENTER_PAD\",\n  \"KEY_PRTSCR\",\n  \"KEY_PAUSE\",\n  \"KEY_ABNT_C1\",\n  \"KEY_YEN\",\n  \"KEY_KANA\",\n  \"KEY_CONVERT\",\n  \"KEY_NOCONVERT\",\n  \"KEY_AT\",\n  \"KEY_CIRCUMFLEX\",\n  \"KEY_COLON2\",\n  \"KEY_KANJI\",\n  \"KEY_EQUALS_PAD\",\n  \"KEY_BACKQUOTE\",\n  \"KEY_SEMICOLON\",\n  \"KEY_COMMAND\",\n  \"KEY_UNKNOWN1\",\n  \"KEY_UNKNOWN2\",\n  \"KEY_UNKNOWN3\",\n  \"KEY_UNKNOWN4\",\n  \"KEY_UNKNOWN5\",\n  \"KEY_UNKNOWN6\",\n  \"KEY_UNKNOWN7\",\n  \"KEY_UNKNOWN8\",\n  \"KEY_LSHIFT\",\n  \"KEY_RSHIFT\",\n  \"KEY_LCONTROL\",\n  \"KEY_RCONTROL\",\n  \"KEY_ALT\",\n  \"KEY_ALTGR\",\n  \"KEY_LWIN\",\n  \"KEY_RWIN\",\n  \"KEY_MENU\",\n  \"KEY_SCRLOCK\",\n  \"KEY_NUMLOCK\",\n  \"KEY_CAPSLOCK\",\n  \"KEY_MAX\",\n];\n\n/* Keyboard callback. We are very evil and draw to the screen from within\n * the callback. Don't do this in your own programs ;)\n */\nfunction keypress_handler(scancode: number) {\n  const str = \"\";\n  const i = scancode & 0x7f;\n  const x = SCREEN_W - 100 * 3 + (i % 3) * 100;\n  const y = SCREEN_H / 2 + (i / 3 - 21) * 10;\n  const color = scancode & 0x80 ? makecol(255, 255, 0) : makecol(128, 0, 0);\n  rectfill(screen, x, y, x + 95, y + 8, color);\n  textprintf_ex(screen, font, x + 1, y + 1, makecol(0, 0, 0), -1, \"%s\", str);\n}\nEND_OF_FUNCTION(keypress_handler);\n\n/* helper function for making more room on the screen */\nfunction scroll() {\n  blit(screen, screen, 0, 32, 0, 24, SCREEN_W / 2, SCREEN_H - 32);\n  rectfill(\n    screen,\n    0,\n    SCREEN_H - 16,\n    SCREEN_W / 2,\n    SCREEN_H - 1,\n    makecol(255, 255, 255)\n  );\n}\n\nasync function main() {\n  let buf = \"\";\n  let k = 0;\n\n  if (allegro_init() !== 0) return 1;\n  install_keyboard();\n  install_timer();\n\n  if (set_gfx_mode(GFX_AUTODETECT, 640, 480, 0, 0) !== 0) {\n    if (set_gfx_mode(GFX_SAFE, 640, 480, 0, 0) !== 0) {\n      set_gfx_mode(GFX_TEXT, 0, 0, 0, 0);\n      allegro_message(\"Unable to set any graphic mode\\n%s\\n\", allegro_error);\n      return 1;\n    }\n  }\n\n  set_palette(desktop_palette);\n\n  clear_to_color(screen, makecol(255, 255, 255));\n\n  /* Draw the initial keys grid by simulating release of every key. */\n  for (k = 0; k < KEY_MAX; k++) keypress_handler(k + 0x80);\n\n  /* Install our keyboard callback. */\n  LOCK_FUNCTION(keypress_handler);\n\n  acquire_screen();\n  textprintf_centre_ex(\n    screen,\n    font,\n    SCREEN_W / 2,\n    8,\n    makecol(0, 0, 0),\n    makecol(255, 255, 255),\n    \"Driver: %s\",\n    keyboard_driver.name\n  );\n\n  /* keyboard input can be accessed with the readkey() function */\n  textprintf_ex(\n    screen,\n    font,\n    8,\n    SCREEN_H - 16,\n    makecol(0, 0, 0),\n    makecol(255, 255, 255),\n    \"Press some keys (ESC to finish)\"\n  );\n  scroll();\n\n  do {\n    release_screen();\n    k = await readkey();\n    acquire_screen();\n    scroll();\n    textprintf_ex(\n      screen,\n      font,\n      8,\n      SCREEN_H - 16,\n      makecol(0, 0, 0),\n      makecol(255, 255, 255),\n      \"readkey() returned %-6d (0x%04X)\",\n      k,\n      k\n    );\n    console.log(k >> 8);\n  } while (k >> 8 !== KEY_ENTER);\n\n  /* the ASCII code is in the low byte of the return value */\n  scroll();\n  scroll();\n  scroll();\n  textprintf_ex(\n    screen,\n    font,\n    8,\n    SCREEN_H - 16,\n    makecol(0, 0, 0),\n    makecol(255, 255, 255),\n    \"Press some more keys (ESC to finish)\"\n  );\n  scroll();\n\n  do {\n    release_screen();\n    k = await readkey();\n    acquire_screen();\n    scroll();\n    textprintf_ex(\n      screen,\n      font,\n      8,\n      SCREEN_H - 16,\n      makecol(0, 0, 0),\n      makecol(255, 255, 255),\n      \"ASCII code is %d\",\n      k & 0xff\n    );\n  } while (k >> 8 !== KEY_ENTER);\n\n  /* the hardware scan code is in the high byte of the return value */\n  scroll();\n  scroll();\n  scroll();\n  textprintf_ex(\n    screen,\n    font,\n    8,\n    SCREEN_H - 16,\n    makecol(0, 0, 0),\n    makecol(255, 255, 255),\n    \"Press some more keys (ESC to finish)\"\n  );\n  scroll();\n\n  do {\n    release_screen();\n    k = await readkey();\n    acquire_screen();\n    scroll();\n    textprintf_ex(\n      screen,\n      font,\n      8,\n      SCREEN_H - 16,\n      makecol(0, 0, 0),\n      makecol(255, 255, 255),\n      \"Scan code is %d (%s)\",\n      k >> 8,\n      key_names[k >> 8]\n    );\n  } while (k >> 8 !== KEY_ENTER);\n\n  /* key qualifiers are stored in the key_shifts variable. Note that this\n   * version of the code uses ureadkey() instead of readkey(): that is\n   * necessary if you want to access Unicode characters from outside\n   * the normal ASCII range, for example to support Russian or Chinese.\n   */\n  scroll();\n  scroll();\n  scroll();\n  textprintf_ex(\n    screen,\n    font,\n    8,\n    SCREEN_H - 16,\n    makecol(0, 0, 0),\n    makecol(255, 255, 255),\n    \"Press some more keys (ESC to finish)\"\n  );\n  scroll();\n\n  do {\n    release_screen();\n    k = await readkey();\n    acquire_screen();\n    buf = \"\";\n    if (key_shifts & KB_SHIFT_FLAG) buf += \"shift \";\n    if (key_shifts & KB_CTRL_FLAG) buf += \"ctrl \";\n    if (key_shifts & KB_ALT_FLAG) buf += \"alt \";\n    if (key_shifts & KB_LWIN_FLAG) buf += \"lwin \";\n    if (key_shifts & KB_RWIN_FLAG) buf += \"rwin \";\n    if (key_shifts & KB_MENU_FLAG) buf += \"menu \";\n    if (key_shifts & KB_COMMAND_FLAG) buf += \"command \";\n    if (key_shifts & KB_CAPSLOCK_FLAG) buf += \" caps\";\n    if (key_shifts & KB_NUMLOCK_FLAG) buf += \" num\";\n    if (key_shifts & KB_SCROLOCK_FLAG) buf += \" scrl\";\n    scroll();\n    textprintf_ex(\n      screen,\n      font,\n      8,\n      SCREEN_H - 16,\n      makecol(0, 0, 0),\n      makecol(255, 255, 255),\n      buf\n    );\n  } while (k >> 8 !== KEY_ENTER);\n\n  /* various scan codes are defined in allegro.h as KEY_* constants */\n  scroll();\n  scroll();\n  scroll();\n  textprintf_ex(\n    screen,\n    font,\n    8,\n    SCREEN_H - 16,\n    makecol(0, 0, 0),\n    makecol(255, 255, 255),\n    \"Press F6\"\n  );\n  scroll();\n\n  release_screen();\n  k = await readkey();\n  acquire_screen();\n\n  while (k >> 8 !== KEY_F6 && k >> 8 !== KEY_ESC) {\n    scroll();\n    textprintf_ex(\n      screen,\n      font,\n      8,\n      SCREEN_H - 16,\n      makecol(0, 0, 0),\n      makecol(255, 255, 255),\n      \"Wrong key, stupid! I said press F6\"\n    );\n    release_screen();\n    k = await readkey();\n    acquire_screen();\n  }\n\n  /* for detecting multiple simultaneous key presses, use the key[] array */\n  scroll();\n  scroll();\n  scroll();\n  textprintf_ex(\n    screen,\n    font,\n    8,\n    SCREEN_H - 16,\n    makecol(0, 0, 0),\n    makecol(255, 255, 255),\n    \"Press a combination of numbers\"\n  );\n  scroll();\n  scroll();\n\n  release_screen();\n\n  do {\n    buf = \"\";\n    if (key[KEY_0]) buf += \"0\";\n    else buf += \" \";\n    if (key[KEY_1]) buf += \"1\";\n    else buf += \" \";\n    if (key[KEY_2]) buf += \"2\";\n    else buf += \" \";\n    if (key[KEY_3]) buf += \"3\";\n    else buf += \" \";\n    if (key[KEY_4]) buf += \"4\";\n    else buf += \" \";\n    if (key[KEY_5]) buf += \"5\";\n    else buf += \" \";\n    if (key[KEY_6]) buf += \"6\";\n    else buf += \" \";\n    if (key[KEY_7]) buf += \"7\";\n    else buf += \" \";\n    if (key[KEY_8]) buf += \"8\";\n    else buf += \" \";\n    if (key[KEY_9]) buf += \"9\";\n    else buf += \" \";\n    textprintf_ex(\n      screen,\n      font,\n      8,\n      SCREEN_H - 16,\n      makecol(0, 0, 0),\n      makecol(255, 255, 255),\n      buf\n    );\n    await rest(1);\n  } while (!key[KEY_ESC]);\n\n  clear_keybuf();\n  // keyboard_lowlevel_callback = null;\n  return 0;\n}\n\nEND_OF_MAIN();\n\ninit_allegro_ts(\"canvas_id\", main);\nenable_debug(\"debug\");\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t516: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkallegro_ts_examples\"] = self[\"webpackChunkallegro_ts_examples\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [512], () => (__webpack_require__(511)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","key_names","keypress_handler","scancode","i","x","SCREEN_W","y","SCREEN_H","color","makecol","rectfill","screen","textprintf_ex","font","scroll","blit","END_OF_FUNCTION","END_OF_MAIN","init_allegro_ts","buf","k","allegro_init","install_keyboard","install_timer","set_gfx_mode","GFX_AUTODETECT","GFX_SAFE","GFX_TEXT","allegro_message","allegro_error","set_palette","desktop_palette","clear_to_color","KEY_MAX","LOCK_FUNCTION","acquire_screen","textprintf_centre_ex","keyboard_driver","name","release_screen","readkey","console","log","KEY_ENTER","key_shifts","KB_SHIFT_FLAG","KB_CTRL_FLAG","KB_ALT_FLAG","KB_LWIN_FLAG","KB_RWIN_FLAG","KB_MENU_FLAG","KB_COMMAND_FLAG","KB_CAPSLOCK_FLAG","KB_NUMLOCK_FLAG","KB_SCROLOCK_FLAG","KEY_F6","KEY_ESC","key","KEY_0","KEY_1","KEY_2","KEY_3","KEY_4","KEY_5","KEY_6","KEY_7","KEY_8","KEY_9","rest","clear_keybuf","enable_debug","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","m","O","result","chunkIds","fn","priority","notFulfilled","Infinity","length","fulfilled","j","Object","keys","every","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","id","chunkLoadingGlobal","self","forEach","bind","push","__webpack_exports__"],"sourceRoot":""}