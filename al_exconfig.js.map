{"version":3,"file":"al_exconfig.js","mappings":"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","sources":["webpack://allegro-ts-examples/webpack/runtime/chunk loaded","webpack://allegro-ts-examples/./src/al_exconfig.ts","webpack://allegro-ts-examples/webpack/bootstrap","webpack://allegro-ts-examples/webpack/runtime/compat get default export","webpack://allegro-ts-examples/webpack/runtime/define property getters","webpack://allegro-ts-examples/webpack/runtime/hasOwnProperty shorthand","webpack://allegro-ts-examples/webpack/runtime/jsonp chunk loading","webpack://allegro-ts-examples/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","/*\n *    Example program for the Allegro library, by Lennart Steinke.\n *\n *    This is a very simple program showing how to use the Allegro\n *    configuration (ini file) routines. A first look at the example\n *    shows nothing more than a static graphic and the wait for\n *    a key press. However, the way this graphic is displayed is\n *    configured through a custom exconfig.ini file which is loaded\n *    manually. From this file the example obtains parameters like\n *    fullscreen/windowed mode, a specific graphic resolution to set\n *    up, which graphic to show, how to blit it on the screen, etc.\n */\n\nimport {\n  screen,\n  allegro_init,\n  allegro_message,\n  BITMAP,\n  blit,\n  clear_bitmap,\n  END_OF_MAIN,\n  get_config_argv,\n  get_config_int,\n  get_config_string,\n  install_keyboard,\n  load_bitmap,\n  makecol,\n  pop_config_state,\n  push_config_state,\n  RGB,\n  SCREEN_H,\n  SCREEN_W,\n  set_color_depth,\n  set_config_file,\n  set_gfx_mode,\n  stretch_blit,\n  textprintf_centre_ex,\n  GFX_AUTODETECT_FULLSCREEN,\n  GFX_AUTODETECT_WINDOWED,\n  font,\n  ustricmp,\n  ustrdup,\n  set_palette,\n  allegro_ready,\n  readkey,\n  textout_ex,\n  init_allegro_ts,\n  enable_debug,\n} from \"allegro-ts\";\n\nasync function main() {\n  let w: number;\n  let h: number;\n  let bpp: number;\n  let windowed: number;\n  let data;\n\n  let title = \"\";\n  let filename = \"\";\n  let r: number;\n  let g: number;\n  let b: number;\n\n  let background: BITMAP | null = null;\n  let display: number;\n  const pal: RGB = {\n    r: 0,\n    g: 0,\n    b: 0,\n  };\n  let x: number;\n  let y: number;\n\n  /* you should always do this at the start of Allegro programs */\n  if (allegro_init() != 0) return 1;\n  /* set up the keyboard handler */\n  install_keyboard();\n\n  /* save the current ini file, then set the program specific one */\n  push_config_state();\n  set_config_file(\"assets/exconfig.ini\");\n\n  await allegro_ready();\n\n  /* the gfx mode is stored like this:\n   *    640  480 16\n   * the get_config_argv() function returns a pointer to a char\n   * array, and stores the size of the char array in an int\n   */\n  data = get_config_argv(\"graphics\", \"mode\");\n  if (data.length != 3) {\n    /* We expect only 3 parameters */\n    allegro_message(\n      \"Found %i parameters in graphics.mode instead of the 3 expected.\\n\",\n      data.length\n    );\n    w = 320;\n    h = 200;\n    bpp = 8;\n  } else {\n    w = parseInt(data[0], 10);\n    h = parseInt(data[1], 10);\n    bpp = parseInt(data[2], 10);\n  }\n\n  /* Should we use a windowed mode?\n   * In the config file this is stored as either FALSE or TRUE.\n   * So we need to read a string and see what it contains.\n   * If the entry is not found, we use \"FALSE\" by default\n   */\n  if (\n    ustricmp(get_config_string(\"graphics\", \"windowed\", \"FALSE\"), \"FALSE\") == 0\n  )\n    windowed = GFX_AUTODETECT_FULLSCREEN;\n  else windowed = GFX_AUTODETECT_WINDOWED;\n\n  /* the title string\n   * The string returned is stored inside of the config system\n   * and would be lost if we call pop_config_state(), so we create\n   * a copy of it.\n   */\n  title = ustrdup(get_config_string(\"content\", \"headline\", \"<no headline>\"));\n\n  /* the title color\n   * once again this is stored as three ints in one line\n   */\n  data = get_config_argv(\"content\", \"headercolor\");\n  if (data.length != 3) {\n    /* We expect only 3 parameters */\n    allegro_message(\n      \"Found %i parameters in content.headercolor instead of the 3 expected.\\n\",\n      data.length\n    );\n    r = g = b = 255;\n  } else {\n    r = parseInt(data[0], 10);\n    g = parseInt(data[1], 10);\n    b = parseInt(data[2], 10);\n  }\n\n  /* The image file to read\n   * The string returned is stored inside of the config system\n   * and would be lost if we call pop_config_state(), so we create\n   * a copy of it.\n   */\n  filename = ustrdup(get_config_string(\"content\", \"image\", \"assets/mysha.png\"));\n\n  /* and it's tiling mode */\n  display = get_config_int(\"content\", \"display\", 0);\n  if (display < 0 || display > 2) {\n    allegro_message(\"content.display must be within 0..2\\n\");\n    display = 0;\n  }\n\n  /* restore the old config file */\n  pop_config_state();\n\n  /* set the graphics mode */\n  set_color_depth(bpp);\n  if (set_gfx_mode(windowed, w, h, 0, 0) != 0) {\n    allegro_message(\"Unable to set mode %ix%i with %ibpp\\n\", w, h, bpp);\n  }\n\n  /* Clear the screen */\n  clear_bitmap(screen);\n\n  /* load the image */\n  background = load_bitmap(filename, pal);\n\n  await allegro_ready();\n\n  if (background.ready) {\n    set_palette(pal);\n\n    switch (display) {\n      case 0 /* stretch */:\n        stretch_blit(\n          background,\n          screen,\n          0,\n          0,\n          background.w,\n          background.h,\n          0,\n          0,\n          SCREEN_W,\n          SCREEN_H\n        );\n        break;\n\n      case 1 /* center */:\n        blit(\n          background,\n          screen,\n          0,\n          0,\n          (SCREEN_W - background.w) / 2,\n          (SCREEN_H - background.h) / 2,\n          background.w,\n          background.h\n        );\n        break;\n\n      case 2 /* tile */:\n        for (y = 0; y < SCREEN_H; y += background.h)\n          for (x = 0; x < SCREEN_W; x += background.w)\n            blit(background, screen, 0, 0, x, y, background.w, background.h);\n        break;\n    }\n  } else {\n    textprintf_centre_ex(\n      screen,\n      font,\n      SCREEN_W / 2,\n      SCREEN_H / 2,\n      makecol(r, g, b),\n      -1,\n      \"%s not found\",\n      filename\n    );\n  }\n\n  textout_ex(screen, font, title, SCREEN_W / 2, 20, makecol(r, g, b), -1);\n\n  await readkey();\n\n  return 0;\n}\nEND_OF_MAIN();\n\n// Start\ninit_allegro_ts(\"canvas_id\", main);\nenable_debug(\"debug\");\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t850: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkallegro_ts_examples\"] = self[\"webpackChunkallegro_ts_examples\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [512], () => (__webpack_require__(509)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","END_OF_MAIN","init_allegro_ts","title","filename","background","pal","r","g","b","allegro_init","install_keyboard","push_config_state","set_config_file","allegro_ready","data","get_config_argv","length","allegro_message","w","h","bpp","parseInt","windowed","ustricmp","get_config_string","GFX_AUTODETECT_FULLSCREEN","GFX_AUTODETECT_WINDOWED","ustrdup","display","get_config_int","pop_config_state","set_color_depth","set_gfx_mode","clear_bitmap","screen","load_bitmap","ready","set_palette","stretch_blit","SCREEN_W","SCREEN_H","blit","y","x","textprintf_centre_ex","font","makecol","textout_ex","readkey","enable_debug","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","m","O","result","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","Object","keys","every","key","splice","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","id","chunkLoadingGlobal","self","forEach","bind","push","__webpack_exports__"],"sourceRoot":""}